#!/usr/bin/env zsh

source "$SHA1N_PROFILE_HOME/scripts/lib.zsh"
source "$SHA1N_PROFILE_HOME/include/tab_colors/functions"

function toupper() {
  echo "$1" | tr a-z A-Z
}

function tolower() {
  echo "$1" | tr A-Z a-z
}


#
# Adds the provided alias to the last command
# FIXME shai: escape double/single quotes or use function instead of alias?
#
function alias_last() {
  local last_command=$(echo "${history[@][1]}" | xargs)
  local alias=$(echo "$1" | xargs)

  echo "Adding: alias '${alias}=${last_command}' to '$SHA1N_PROFILE_HOME/include/aliases'"
  echo "# Added by function 'alias_last'" >> "$SHA1N_PROFILE_HOME/include/aliases"
  echo "alias ${alias}='${last_command}'" >> "$SHA1N_PROFILE_HOME/include/aliases"

  echo "Reloading profile..."
  source "$HOME/.zshrc"

  echo "Alright..."
}

#
# Executes 'bazel' with the specified arguments and runs an async mtime based cleanup command on the
# bazel disk-cache directory when the command exists.
#
function bazel_with_disk_cache_guard() {
  ("$BAZEL_BIN_PATH" "$@")
  local rc="$?"

  (find "$BAZEL_DISK_CACHE_DIR" -type f -mtime +$BAZEL_DISK_CACHE_MAX_AGE -delete &)
  if [[ "$?" != "0" ]]; then
    __profile_log_warn "[${funcstack[1]}] disk cache cleanup failed"
  fi

  return "$rc"
}

#
# Searches the current directory path for a '.start' file and sources it if found. Otherwise prints an error.
#
function start() {
  local start_path=$(__profile_search_ancestor_tree ".start")
  if [[ "$start_path" != "" ]]; then
    source "$start_path"
  else
    __profile_log_error "no '.start' file could be found in the current directory tree"
  fi
}

#
# Searches for the nearest jest and executes it in the current directory.
#
function jest() {
  local jest_path=$(__profile_search_ancestor_tree "node_modules/jest/bin/jest.js")
  if [[ "$jest_path" != "" ]]; then
    node "$jest_path" "$@"
  else
    __profile_log_error "couldn't find jest in the current directory tree"
  fi
}

#
# Starts a new line at the end of the prompt
#
function prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
      print -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
      print -n "%{%k%}"
  fi

  print -n "\n‚ùØ%{%f%}"
  CURRENT_BG=''
}

#
# Maven single test runner utility
#
function mvnt() {
  if [[ "$1" != "" ]]; then
    mvn test -Dtest=$(basename $(fzf -1 -q $1))
  else 
    mvn test -Dtest=$(basename $(fzf -q '!target !src/main .java '))
  fi
}

#
# Pytest single test runner utility
#
function pytestt() {
  if [[ "$1" != "" ]]; then
    pytest -s -v $(fzf -e -1 -q $1)
  else 
    pytest -s -v $(fzf -e)
  fi
}

#
# Export JAVA_HOME from brew openjdk
#
function export_openjdk_formula() {
  if [[ -z "$1" ]]; then
    __profile_log_error "Usage: export_openjdk_formula <version>"
    __profile_log_error "Example: export_openjdk_formula 21"
    return 1
  fi
  
  local version="$1"
  local formula="openjdk@${version}"

  if ! brew list --formula | grep -q "^${formula}$"; then
    __profile_log_error "OpenJDK formula '${formula}' is not installed"
    echo "Available OpenJDK formulas:"
    brew search openjdk | grep -E "^openjdk(@[0-9]+)?$" | sort -V
    echo ""
    echo "To install, run: brew install ${formula}"
    return 1
  fi
  
  local formula_prefix
  if ! formula_prefix="$(brew --prefix "$formula" 2>/dev/null)"; then
    __profile_log_error "Failed to get brew prefix for formula '${formula}'"
    return 1
  fi

  local java_home="${formula_prefix}/libexec/openjdk.jdk/Contents/Home"

  if [[ ! -d "$java_home" ]]; then
    __profile_log_error "Java home directory not found: $java_home"
    __profile_log_error "The formula '${formula}' may be corrupted. Try reinstalling:"
    echo "  brew uninstall ${formula} && brew install ${formula}"
    return 1
  fi

  if [[ ! -x "$java_home/bin/java" ]]; then
    __profile_log_error "Java binary not found or not executable: $java_home/bin/java"
    return 1
  fi

  local java_version
  if ! java_version=$("$java_home/bin/java" -version 2>&1 | head -n 1 | awk -F '"' '{print $2}'); then
    __profile_log_error "Failed to get Java version from: $java_home/bin/java"
    return 1
  fi

  export JAVA_HOME="$java_home"

  echo "‚úÖ Successfully configured OpenJDK ${version}"
  echo ""
  echo "üìç JAVA_HOME: $JAVA_HOME"
  echo "‚òï Java version: $java_version"
  echo ""
  echo "üîß To make this permanent, add to your shell profile:"
  echo "   export JAVA_HOME=\"$JAVA_HOME\""
  echo ""
  echo "üí° You can also add \$JAVA_HOME/bin to your PATH:"
  echo "   export PATH=\"\$JAVA_HOME/bin:\$PATH\""
}
